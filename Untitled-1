Los prototipos de las funciones aquí descritas aparecen en el fichero code.h:
extern void assign(): Asigna el valor en la cima de la pila al siguiente valor.
extern void add(): Suma los dos elementos de la cima de la pila, y apila el resultado.
extern void substract(): Le resta al valor en la cima de la pila el siguiente valor, y apila el resultado.
extern void multiply(): Multiplica los dos valores en la cima de la pila, y apila el resultado.
extern void divide(): Divide el valor en la cima de la pila entre el siguiente valor, y apila el resultado.
extern void constpush(): Introduce una constante en la parte superior de la pila.
extern void randpush(): Introduce un valor aleatorio en la parte superior de la pila.
extern void charpush(): Introduce una cadena en la parte superior de la pila.
void dividir(): Calcula el cociente del segundo valor de la pila entre el valor de la cima, y apila el resultado.
void escribir(): Imprime por pantalla el valor de una expresión numérica.
void escribir_cadena(): Imprime por pantalla una expresión alfanumérica (cadena o concatenación de cadenas).
void eval(): Evalua la variable en la cima de la pila.
void preincremento(): Función que incrementa en uno el valor de una variable, y apila el valor resultante.
void postincremento(): Función que incrementa en uno el valor de una variable, y apila su valor original.
void predecremento(): Función que decrementa en uno el valor de una variable, y apila el valor resultante.
void postdecremento(): Función que decrementa en uno el valor de una variable, y apila su valor original.
void funcion0(): Evalua una función predefinida sin parámetros.
void funcion1(): Evalua una función predefinida con un parámetro.
void funcion2(): Evalua una función predefinida con dos parámetros.
void modulo(): Calcula el valor del segundo valor en la pila modulo el primero, y apila el resultado.
void div_entera(): Calcula la división entera del segundo valor de la pila entre el valor de la cima, y apila el resultado.
void multiplicar(): Multiplica los dos valores de la cima de la pila, y apila el resultado.
void negativo(): Multiplica por -1 el valor de la cima de la pila.
void positivo(): Función que no altera el valor de la cima de la pila (Kiko, por qué? D':)
void potencia(): Eleva el segundo valor en la pila al primero, y apila el resultado.
void restar(): Resta al segundo valor en la pila el primero, y apila el resultado.
void sumar(): Suma los dos valores de la parte superior de la pila, y apila el resultado.
void varpush(): Apila una variable.
void concatenacion(): Concatena la segunda variable de la pila con la variable de la cima (variables alfanuméricas) y apila la variable resultante.
void ifcode(): Implementa una estructura condicional simple o compuesta.
void whilecode(): Implementa el bucle mientras.
void repeatcode(): Implementa el bucle repetir.
void forcode(): Implementa el bucle para.

Para los operadores de comparación y los operadores lógicos, se empleará el valor 1 a modo de true, y el valor 0 a modo de false.

void mayor_que(): Compara el segundo valor de la pila con el primero, y si es mayor, apila el valor 1; en caso contrario, apila el valor 0. 
void menor_que(): Compara el segundo valor de la pila con el primero, y si es menor, apila el valor 1; en caso contrario, apila el valor 0. 
void mayor_igual(): Compara el segundo valor de la pila con el primero, y si es mayor o igual, apila el valor 1; en caso contrario, apila el valor 0.
void menor_igual(): Compara el segundo valor de la pila con el primero, y si es menor o igual, apila el valor 1; en caso contrario, apila el valor 0.
void igual(): Compara los dos valores de la cima, y si son iguales, apila el valor 1; en caso contrario, apila el valor 0.
void distinto(): Compara los dos valores de la cima, y si son distintos, apila el valor 1; en caso contrario, apila el valor 0.
void y_logico(): Extrae los dos valores de la cima, y si ambos son 1 (true), apila el valor 1; en caso contrario, apila el valor 0.
void o_logico(): Extrae los dos valores de la cima, y si alguno de ellos es 1 (true), apila el valor 1; en caso contrario, apila el valor 0.
void negacion(): Extrae el valor de la cima, lo niega (si era 1 se le asigna el valor 0, y viceversa), y después lo apila.
void leervariable(): Lee una variable de tipo numérico.
void leervariable_cadena(): Lee una variable alfanumérica (cadena).
void lugar(): Situa el cursor en la posición de la terminal designada por los dos valores en la cima de la pila: el primero designa el número de columna, y el segundo el número de fila.
void borrar(): Borra la terminal.